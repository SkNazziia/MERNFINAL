{"ast":null,"code":"import axios from\"axios\";import setAuthToken from\"../utils/setAuthToken\";import jwt_decode from\"jwt-decode\";import{GET_ERRORS,SET_CURRENT_USER,USER_LOADING}from\"./types\";// Register User\nexport const registerUser=(userData,history)=>dispatch=>{axios.post(\"http://localhost:3000/user/register\",userData).then(res=>alert(\"User registered successfully! You can log in now. \"),history.push(\"/register\"))// re-direct to login on successful register\n.catch(err=>dispatch({type:GET_ERRORS,payload:err.response.data}));};// Login - get user token\nexport const loginUser=userData=>dispatch=>{axios.post(\"http://localhost:4000/user/login\",userData).then(res=>{// Save to localStorage\n// Set token to localStorage\nconst{token}=res.data;localStorage.setItem(\"jwtToken\",token);// Set token to Auth header\nsetAuthToken(token);// Decode token to get user data\nconst decoded=jwt_decode(token);// Set current user\ndispatch(setCurrentUser(decoded));}).catch(err=>dispatch({type:GET_ERRORS,payload:err.response.data}));};// Set logged in user\nexport const setCurrentUser=decoded=>{return{type:SET_CURRENT_USER,payload:decoded};};// User loading\nexport const setUserLoading=()=>{return{type:USER_LOADING};};// Log user out\nexport const logoutUser=()=>dispatch=>{// Remove token from local storage\nlocalStorage.removeItem(\"jwtToken\");// Remove auth header for future requests\nsetAuthToken(false);// Set current user to empty object {} which will set isAuthenticated to false\ndispatch(setCurrentUser({}));};","map":{"version":3,"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","alert","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"sources":["C:/Users/LOKESH/Desktop/new/JobsPlanet-MERN-App-master/frontend/src/actions/authActions.js"],"sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post(\"http://localhost:3000/user/register\", userData)\n        .then(res => alert(\"User registered successfully! You can log in now. \"),history.push(\"/register\")) // re-direct to login on successful register\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data,\n            })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n    .post(\"http://localhost:4000/user/login\", userData)\n    .then(res => {\n        // Save to localStorage\n        // Set token to localStorage\n        const { token } = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n            dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\n// User loading\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,YAAY,KAAM,uBAAuB,CAChD,MAAO,CAAAC,UAAU,KAAM,YAAY,CACnC,OACIC,UAAU,CACVC,gBAAgB,CAChBC,YAAY,KACT,SAAS,CAEhB;AACA,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAACC,QAAQ,CAAEC,OAAO,GAAKC,QAAQ,EAAI,CAC3DT,KAAK,CACAU,IAAI,CAAC,qCAAqC,CAAEH,QAAQ,CAAC,CACrDI,IAAI,CAACC,GAAG,EAAIC,KAAK,CAAC,oDAAoD,CAAC,CAACL,OAAO,CAACM,IAAI,CAAC,WAAW,CAAC,CAAE;AAAA,CACnGC,KAAK,CAACC,GAAG,EACNP,QAAQ,CAAC,CACLQ,IAAI,CAAEd,UAAU,CAChBe,OAAO,CAAEF,GAAG,CAACG,QAAQ,CAACC,IAC1B,CAAC,CACT,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,SAAS,CAAGd,QAAQ,EAAIE,QAAQ,EAAI,CAC7CT,KAAK,CACJU,IAAI,CAAC,kCAAkC,CAAEH,QAAQ,CAAC,CAClDI,IAAI,CAACC,GAAG,EAAI,CACT;AACA;AACA,KAAM,CAAEU,KAAM,CAAC,CAAGV,GAAG,CAACQ,IAAI,CAC1BG,YAAY,CAACC,OAAO,CAAC,UAAU,CAAEF,KAAK,CAAC,CACvC;AACArB,YAAY,CAACqB,KAAK,CAAC,CACnB;AACA,KAAM,CAAAG,OAAO,CAAGvB,UAAU,CAACoB,KAAK,CAAC,CACjC;AACAb,QAAQ,CAACiB,cAAc,CAACD,OAAO,CAAC,CAAC,CACrC,CAAC,CAAC,CACDV,KAAK,CAACC,GAAG,EACFP,QAAQ,CAAC,CACTQ,IAAI,CAAEd,UAAU,CAChBe,OAAO,CAAEF,GAAG,CAACG,QAAQ,CAACC,IAC1B,CAAC,CACL,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,cAAc,CAAGD,OAAO,EAAI,CACrC,MAAO,CACHR,IAAI,CAAEb,gBAAgB,CACtBc,OAAO,CAAEO,OACb,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,cAAc,CAAGA,CAAA,GAAM,CAChC,MAAO,CACHV,IAAI,CAAEZ,YACV,CAAC,CACL,CAAC,CAED;AACA,MAAO,MAAM,CAAAuB,UAAU,CAAGA,CAAA,GAAMnB,QAAQ,EAAI,CACxC;AACAc,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC,CACnC;AACA5B,YAAY,CAAC,KAAK,CAAC,CACnB;AACAQ,QAAQ,CAACiB,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}